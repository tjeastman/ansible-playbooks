#!/usr/bin/env python

import argparse
import collections
import json
import os

import boto.ec2


class Instance(object):

    def __init__(self, instance):
        self._instance = instance

    @property
    def groups(self):
        return self._instance.tags.values()

    @property
    def hostname(self):
        return self._instance.public_dns_name

    @property
    def vars(self):
        return {
            'public_dns_name': self._instance.public_dns_name,
            'private_dns_name': self._instance.private_dns_name,
        }


class InstanceIterator(object):

    def __init__(self):
        self._conn = boto.ec2.connect_to_region(os.environ.get('EC2_REGION'))

    def __iter__(self):
        for reservation in self._conn.get_all_reservations():
            for instance in reservation.instances:
                if instance.state != 'terminated':
                    yield Instance(instance)


class Inventory(object):

    def __init__(self, instances):
        grouping = collections.defaultdict(list)
        hostvars = {}
        for instance in instances:
            for group in instance.groups:
                grouping[group].append(instance.hostname)
                hostvars[instance.hostname] = instance.vars
        self._contents = grouping
        self._contents['_meta'] = {'hostvars': hostvars}

    def to_json(self):
        return json.dumps(self._contents)


def list_hosts():
    return Inventory(InstanceIterator()).to_json()


def list_host():
    return json.dumps({})


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--list', help='list all hosts', action='store_true')
    parser.add_argument('--host', help='list details about a specific host')
    arguments = parser.parse_args()
    if arguments.list:
        print list_hosts()
    elif arguments.host:
        print list_host(arguments.host)
