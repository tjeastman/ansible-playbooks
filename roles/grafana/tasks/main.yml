---
- name: add Package Cloud package signing key
  apt_key: url=https://packagecloud.io/gpg.key state=present
  register: grafana_package_config
- name: add Grafana APT package repository
  copy: src=grafana.list dest=/etc/apt/sources.list.d
  register: grafana_package_config
- name: update APT cache
  apt: update_cache=yes
  when: grafana_package_config.changed or package_cache_update == "yes"
- name: install HTTPS APT transport package
  apt: name=apt-transport-https update_cache=no state={{ package_state }}
- name: install Grafana package
  apt: name=grafana update_cache=no state={{ package_state }}
- name: enable Grafana service
  service: name=grafana-server enabled=yes
- name: install Grafana configuration file
  template: src=grafana.ini dest=/etc/grafana owner=root group=grafana mode=640
  notify:
    - restart Grafana
- name: load existing Grafana data sources
  uri:
    method: GET
    url: "{{ grafana_api_datasources_url }}"
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
  register: datasources
- name: search for the data source to create/update
  set_fact:
    matching_datasources: "{{ datasources.json|selectattr('name', 'equalto', grafana_datasource_name)|list }}"
- name: ensure that at most one instance of the data source exists
  fail: msg="Unexpected multiple copies of data source named {{ grafana_datasource_name }}"
  when: matching_datasources|length > 1
- name: add the data source if it does not exist
  uri:
    method: POST
    body_format: json
    body: "{{ lookup('template', 'datasource.json')|from_json }}"
    url: "{{ grafana_api_datasources_url }}"
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
    status_code: 200
  when: matching_datasources|length == 0
- name: update the data source if it does exist
  uri:
    method: PUT
    body_format: json
    body: "{{ lookup('template', 'datasource.json')|from_json }}"
    url: "{{ grafana_api_datasources_url }}/{{ matching_datasources.0.id }}"
    user: "{{ grafana_admin_user }}"
    password: "{{ grafana_admin_password }}"
    force_basic_auth: yes
    status_code: 200
  when: matching_datasources|length == 1
